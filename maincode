//--------------------------------------------------------------------
//====================================================================
//********************************************************************
//====================================================================
//---------------------------header files-----------------------------
/*#include<iostream.h>
#include<fstream.h>
#include<process.h>
#include<string.h>
#include<stdio.h>
#include<ctype.h>
#include<conio.h>
#include<dos.h>*/
#include<bits/stdc++.h>
#include<stdlib.h>
//--------------------------------------------------------------------
//--------Structure for date and function for checking correct date---
//--------------------------------------------------------------------
struct dates
{
	int dd;
	int mm;
	int yyyy;
};
/*void checkdate(dates &d)
{
	if(d.yyyy<1900 || d.yyyy>2020 || d.mm<1 || d.mm>12)
	{
		cout<<"\n Invalid date entered!"
		    <<"\n Re-enter";
		cin>>d.dd>>d.mm>>d.yyyy;
	}
	if(d.mm==2)
	{
		if(d.yyyy%4==0)
		{
			if(d.dd<1 || d.dd>29)
			{
				cout<<"\n Invalid date entered!"
				    <<"\n Re-enter";
				cin>>d.dd>>d.mm>>d.yyyy;
			}
		}
	}
	else if(d.mm==4 || d.mm==6 || d.mm==9 || d.mm==11)
	{
		if(d.dd<1 || d.dd>30)
		{
			cout<<"\n Invalid date entered!"
			    <<"\n Re-enter";
			cin>>d.dd>>d.mm>>d.yyyy;
		}
	}
	else if(d.dd<1 || d.dd>31)
	{
		cout<<"\n Invalid date entered!"
		    <<"\n Re-enter";
		cin>>d.dd>>d.mm>>d.yyyy;
	}
}*/
//-------------------------------------------------------------------
//-----------------Structure for username credentials-----------------
//--------------------------------------------------------------------
struct user_creds
{
	int usercode;
	char username[20];
	char password[15];
};
//--------------------------------------------------------------------
//-----------------Class for the basic details of the server----------
//--------------------------------------------------------------------
class server
{
	public:
		char name[30];
		int code;
		int d;
		char job[20];
		user_creds screds;
		//-----------Member Functions-----------
		void get_ser();
		void show_ser();
		void scode()
		{
			rand();
			code=rand(1000);
		}
		int return_scode()
		{
			return code;
		}
		void get_s_creds();
};
void server::get_s_creds()
{
	screds.usercode=return_scode();
	cout<<"\n Create Username: ";
	gets(screds.username);
	cout<<"\n Create Password: ";
	gets(screds.password);
	d=strlen(screds.password);
}
void server::get_ser()
{
	scode();
	cout<<"\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*";
	cout<<"\n Name of Server: ";
	gets(name);
	cout<<"\n Are you a Nurse or a Doctor? ";
	gets(job);
	get_s_creds();
	cout<<"\n Your Server CODE: ";
	cout<<code;
}
void server::show_ser()
{
	cout<<"\n Code: "<<code;
	cout<<"\n Name of Server: ";
	puts(name);
}
void print_ser(server s)
{
	ifstream fin("servers.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening Databases of servers!";
		exit(0);
	}
	while(fin.read((char*)&s,sizeof(s)))
	{
		s.show_ser();
	}
	fin.clear();
	fin.close();
}
void ser_register()
{
	server s;
	ofstream fout("servers.dat",ios::out|ios::app|ios::binary);
	if(!fout)
	{
		cout<<"\n Error in opening Database of servers!";
		exit(0);
	}
	s.get_ser();
	fout.write((char*)&s,sizeof(s));
	fout.close();
	getch();
}
//--------------------------------------------------------------------
//----------------------CLASS FOR APPOINTMENTS------------------------
//--------------------------------------------------------------------

class appnt
{

    char client_name[25];
	dates date;
	//times time;
	char server_name[25];
	int conf;

	public: char service[10];
			void getdata_cl();
			void getdata_se();
			int confirm();
			void serdef(int);
		int code;
		char medical[30];
		char status[15];
		//-------------Member Functions-----------
		void getapt();
		void showapt();
		void showapply();
		appnt()
		{
			strcpy(status,"OPEN");
		}
		void aptcode()
		{
			rand();
			code=rand(1000-10+1);
		}
		int returncode()
		{
			return code;
		}
};

void appnt::serdef(int ch)
{
	switch(ch)
	{
		case 1: strcpy(service,"Test");
				break;
		case 2: strcpy(service,"Vaccine");
				break;
		case 3: strcpy(service,"Sanitise");
				break;
		default: break;
	}
}

void appnt::getdata_cl()
{
	cout<<"\n Client Name: ";
	gets(client_name);
	int ch;
	cout<<"\n 1. Book Covid-19 test."
		<<"\n 2. Book Covid-19 vaccine."
		<<"\n 3. Sanitise your home."
		<<"\n Choose service: ";
	cin>>ch;
	service(ch);
}

void appnt::getdata_se()
{
	cout<<"\n Enter Name: ";
	gets(server_name);
}

int appnt::confirm()
{
	char c;
	cout<<"\n Confirm? [Y/N] ";
	cin>>c;
	if(c=='y' || c=='Y')
		return 1;
	else
		return 0;
}



void appnt::getapt()
=======

void claccept()
{ 

  appnt c;

  fstream fin;

  fin.open("client.dat",ios::in||ios::binary);
  if(!fin)
 {
   cout<<"\n file could not be opened";
   exit(0); 
 }
  
  while(fin.read((char*)&c,size of c()))
{
   c.getdata_cl();
   break;
}


void clregaccept()
{
  
  client cl;
  appnt c;
  int t=0;
  char uname[25];
  
  fstream fin, fout;
  fin.open("client.dat",ios::in||ios::binary);
  fout.open("client.dat",ios::out||ios::binary);
  
  if(!fin)
{
  cout<<"\n file can not be opened";
  exit(0);
}

  cout<<"\n Enter your username:";
  gets(uname);

 while(fin.read((char*)&cl,size of cl()))
{ 
 if(uname!=c.client_name())
 {
   fout.write(char*)&cl,size of cl());
 }
 
 else
 {
  cout<<"\n Username already exists. Try again";
  t=1;
 }
}
fin.close();
fout.close();
}

  
void seaceept()
{
  
  appnt s;
  
  fstream fin;
  
  fin.open("server.dat",ios::in||ios binary);
  if(!fin)
  {
    cout<<"\n file could not be opened";
    exit(0);
  }
    while(fin.read((char*)&s,size of s()))
  {
     s.service();
     break;
  }
 
 
void seregaccept()
{
 
 server se;
 appnt s;
 int flag=0
 char username[25];
 
 fstream fin, fout;
 fin.open("server.dat",ios::in||ios::binary);
 fout.open("server.dat",ios::out||ios::binary);
 
 if(!fin)
 {
 cout<<"\n file can not be opened";
 exit(0);
 }
 
 cout<<"\n Enter your username:";
 gets(usname);

 while(fin.read((char*)&se,size of se()))
{
 if(usname!=s.server_name())
 {
   fout.write(char*)&se,size of se());
 }
 
else
 {
  cout<<"\n Username already exists. Try again";
  flag=1;
 }
}
fin.close();
fout.close();
}



{
	aptcode();
	cout<<"\n Appointment Code: "<<code;
}
void appnt::showapt()
{
	cout<<"Code: "<<code;

}
void addapts()
{
	appnt a;
	ofstream fout("appointments.dat",ios::out|ios::app|ios::binary);
	if(!fout)
	{
		cout<<"\n Error in Opening Job Database!";
		exit(0);
	}
	a.getapt();
	fout.write((char*)&a,sizeof(a));
	fout.close();
}
void dispapt(appnt a)
{
	ifstream fin("appointments.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening Job Database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&a,sizeof(a));
		a.showapt();
	}
	fin.clear();
	fin.close();
}
void appnt::showapply()
{
	cout<<"\n Details of the server are shown: ";

}
//--------------------------------------------------------------------
//-----------Class for the basic details of client/Company---------
//--------------------------------------------------------------------
class client
{
	char name[50];
	char email[30];
	char phone[15];
	public: user_creds clcreds;
		int d;
		int code;
		//--------------Member Functions--------------
		void get_cl();
		void show_cl();
		void clcode()
		{
			rand();
			code=rand(1000);
		}
		int returncode()
		{
			return code;
		}
		void get_cl_creds();
};
void client::get_cl_creds()
{
	clcreds.usercode=returncode();
	cout<<"\n Create username: ";
	cin>>cl_creds.username;
	cout<<"\n Create password: ";
	cin>>cl_creds.password;
	d=strlen(cl_creds.password);
}
void client::get_cl()
{
	clcode();
	cout<<"\n Name of Client: ";
	cin>>name;
	cout<<"\n Phone Number: ";
	cin>>phone;
	cout<<"\n Email ID: ";
	cin>>email;
	cout<<"\n Your client CODE: ";
	cout<<code;
	get_emp_creds();
	cout<<"\n--------------------------\n";
}
void client::show_emp()
{
	cout<<"\n Code: "<<code;
	cout<<"\n Client Name: ";
	puts(name);
	cout<<"\n Email ID: ";
	puts(email);
	cout<<"\n Phone: ";
	puts(phone);
}
void add_cl()
{
	client c;
	ofstream fout("clients.dat",ios::out|ios::app|ios::binary);
	if(!fout)
	{
		cout<<"\n Error in opening Database of clients!";
		exit(0);
	}
	c.get_cl();
	fout.write((char*)&c,sizeof(c));
	fout.close();
}
void print_cl(client c)
{
	ifstream fin("clients.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening database of clients!";
		exit(0);
	}
	while(fin.read((char*)&c,sizeof(c)))
		c.show_cl();
	fin.clear();
	fin.close();
}
//--------------------------------------------------------------------
//--------------------------Register Function-------------------------
//--------------------------------------------------------------------
void register_user()
{
	clrscr();
	int ch;
	do
	{
		cout<<"\n Register as: "
		    <<"\n\t [1] Server"
		    <<"\n\t [2] Client"
		    <<"\n\t [3] Exit"
		    <<"\n\t     Enter your choice [1-3]: ";
		cin>>ch;
		clrscr();
		switch(ch)
		{
			case 1: ser_register();
				break;
			case 2: add_cl();
				break;
			case 3: break;
			default: cout<<"\n Invalid choice!";
		}
		if(ch!=3)
			getch();
	}
	while(ch!=3);
}
//--------------------------------------------------------------------
//--------Delete Functions for server and client and Job---------
//--------------------------------------------------------------------
void delete_ser()
{
	server a;
	ifstream fin("servers.dat",ios::in|ios::binary);
	ofstream fout("temp.dat",ios::out|ios::binary);
	if(!fin || !fout)
	{
		cout<<"\n Error in opening files!";
		exit(0);
	}
	int code;
	cout<<"\n Enter the Server code: ";
	cin>>code;
	int found=0;
	while(!fin.eof())
	{
		fin.read((char*)&a,sizeof(a));
		if(a.return_scode()!=code)
		{
			fout.write((char*)&a,sizeof(a));
		}
		else if(a.return_scode()==code)
		{
			char ch;
			cout<<"\n Delete Record? [Y/N]: ";
			cin>>ch;
			if(ch=='y' || ch=='Y')
				found=1;
			else if(ch=='n' || ch=='N')
			{
				cout<<"\n Server Record Not Deleted!";
				break;
			}
		}
	}
	fin.clear();
	fin.close();
	if(found==0)
	{
		cout<<"\n Server not found!";
	}
	else
	{
		cout<<"\n Record deleted!";
		remove("servers.dat");
		rename("temp.dat","servers.dat");
	}
}
void delete_cl()
{
	client e;
	ifstream fin("clients.dat",ios::in|ios::binary);
	ofstream fout("temp.dat",ios::out|ios::binary);
	if(!fin || !fout)
	{
		cout<<"\n Error in opening files!";
		exit(0);
	}
	int code;
	cout<<"\n Enter the Client code: ";
	cin>>code;
	int found=0;
	while(!fin.eof())
	{
		fin.read((char*)&e,sizeof(e));
		if(e.returncode()!=code)
		{
			fout.write((char*)&e,sizeof(e));
		}
		else if(e.returncode()==code)
		{
			char ch;
			cout<<"\n Delete Record? [Y/N]: ";
			cin>>ch;
			if(ch=='y' || ch=='Y')
				found=1;
			else if(ch=='n' || ch=='N')
			{
				cout<<"\n Client Record Not Deleted!";
				break;
			}
		}
	}
	fin.clear();
	fin.close();
	if(found==0)
	{
		cout<<"\n client not found!";
	}
	else
	{
		cout<<"\n Record deleted!";
		remove("clients.dat");
		rename("temp.dat","clients.dat");
	}
}
void delete_apt()
{
	appnt j;
	ifstream fin("appointmentss.dat",ios::in|ios::binary);
	ofstream fout("temp.dat",ios::out|ios::binary);
	if(!fin || !fout)
	{
		cout<<"\n Error in opening files!";
		exit(0);
	}
	int code;
	cout<<"\n Enter the Appointment code: ";
	cin>>code;
	int found=0;
	while(!fin.eof())
	{
		fin.read((char*)&j,sizeof(j));
		if(j.returncode()!=code)
		{
			fout.write((char*)&j,sizeof(j));
		}
		else if(j.returncode()==code)
		{
			char ch;
			cout<<"\n Cancel Appointment? [Y/N]: ";
			cin>>ch;
			if(ch=='y' || ch=='Y')
				found=1;
			else if(ch=='n' || ch=='N')
			{
				cout<<"\n Appointment Not Deleted!";
				break;
			}
		}
	}
	fin.clear();
	fin.close();
	if(found==0)
	{
		cout<<"\n Appointment not found!";
	}
	else
	{
		cout<<"\n Record deleted!";
		remove("appointments.dat");
		rename("temp.dat","appointments.dat");
	}
}
//********************************************************************
//------------------------ADMIN USERNAME & PASSWORD-------------------
char adminuser[20]="admin";
char adminpass[15]="passadmin";
//--------------------------------------------------------------------
//********************************************************************

//--------------------------------------------------------------------
//----------------Login for Admin, server and client-------------
//--------------------------------------------------------------------
int enter_admin()
{
	int log=0;
	char user[20], pass[15];
	cout<<"\n Username: ";
	gets(user);
	cout<<"\n Password: ";
	for(int i=0;i<9;i++)
	{
		pass[i]=getch();
		cout<<"*";
	}
	pass[i]='\0';
	if(strcmp(user,adminuser)!=0)
		cout<<"\n Incorrect Username!";
	else if(strcmp(pass,adminpass)!=0)
		cout<<"\n Incorrect Password!";
	else if(strcmp(user,adminuser)==0 && strcmp(pass,adminpass)==0)
	{
		cout<<"\n Admin Login successful!";
		log=1;
	}
	if(log==1)
		return log;
	else
		return 0;
}
int login_ser()
{
	cout<<"\n -SERVER LOGIN-";
	int p;
	int code;
	cout<<"\n Enter your Server CODE: ";
	cin>>code;
	server a;
	ifstream fin("servers.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening server database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&a,sizeof(a));
		cout<<a.screds.usercode;
		getch();
		if(a.screds.usercode==code)
		{
			char usern[20], pass[15];
			cout<<"\n Username: ";
			cin>>usern;
			cout<<"\n Password: ";
			for(int i=0; i<a.d; i++)
			{
				pass[i]=getch();
				cout<<"*";
			}
			pass[i]='\0';
			if(strcmp(usern,a.screds.username)!=0)
				cout<<"\n Incorrect Username!";
			else if(strcmp(pass,a.screds.password)!=0)
				cout<<"\n Incorrect Password!";
			else if(strcmp(usern,a.screds.username)!=0 && strcmp(pass,a.screds.password)!=0)
			{
				cout<<"\n Incorrect credentials!";
				break;
			}
			else if(strcmp(usern,a.screds.username)==0 && strcmp(pass,a.screds.password)==0)
			{
				cout<<"\n Login Successful!";
				p=1;
				break;
			}
		}
	}
	fin.clear();
	fin.close();
	if(p==1)
		return p;
	else
		return 0;
}
int login_cl()
{
	cout<<"\n -CLIENT LOGIN-";
	int l;
	int code;
	cout<<"\n Enter your Client Code: ";
	cin>>code;
	client e;
	ifstream fin("clients.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening client database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&e,sizeof(e));
		if(e.clcreds.usercode==code)
		{
			char usern[20], pass[15];
			cout<<"\n Username: ";
			cin>>usern;
			cout<<"\n Password: ";
			for(int i=0; i<e.d; i++)
			{
				pass[i]=getch();
				cout<<"*";
			}
			pass[i]='\0';
			if(strcmp(usern,e.clcreds.username)!=0)
				cout<<"\n Incorrect Username!";
			else if(strcmp(pass,e.clcreds.password)!=0)
				cout<<"\n Incorrect Password!";
			else if(strcmp(usern,e.clcreds.username)!=0 && strcmp(pass,e.clcreds.password)!=0)
			{
				cout<<"\n Incorrect credentials!";
				break;
			}
			else if(strcmp(usern,e.clcreds.username)==0 && strcmp(pass,e.clcreds.password)==0)
			{
				cout<<"\n Login Successful!";
				l=1;
				break;
			}
		}
	}
	fin.clear();
	fin.close();
	if(l==1)
		return l;
	else
		return 0;
}
//--------------------------------------------------------------------
//------------------------------Function to search Job----------------
//--------------------------------------------------------------------
void search_apt()
{
	char ch;
	appnt j;
	server a;
	int code;
	int match=0;
	ifstream fin("servers.dat", ios::in|ios::binary);
	ifstream f("appointments.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in Opening Server Database!";
		exit(0);
	}
	if(!f)
	{
		cout<<"\n Error in Opening Appointments Database!";
		exit(0);
	}
	cout<<"\n Are you in the Medical Field? [Y/N]: ";
	cin>>ch;
	while(fin.read((char*)&a,sizeof(a)))
	{
		while(f.read((char*)&j,sizeof(j)))
		{
			if(a.code==code && a.exp>=j.expreq)
			{
				cout<<"\n Searching.. \n\n";
				for(int i=0; i<a.n; i++)
				{
					if(strcmp(a.qual[i],j.reqqual)==0)
					{
						match=1;
					}
				}
			}
		}
	}
	if(match==1)
		j.showapt();
	fin.close();
	f.clear();
	f.close();
}
//--------------------------------------------------------------------
//-------------------------Function to apply for job------------------
//--------------------------------------------------------------------
int apply_apt()
{
	jobs j;
	fstream fj("jobs.dat",ios::in|ios::out|ios::app|ios::binary);
	if(!fj)
	{
		cout<<"\n Error opening Jobs Database.";
		exit(0);
	}
	int acode, jcode;
	cout<<"\n Enter your code: ";
	cin>>acode;
	cout<<"\n Enter job code you wish to apply for: ";
	cin>>jcode;
	int f=0;
	while(!fj.eof())
	{
		fj.read((char*)&j,sizeof(j));
		if(j.code==jcode)
		{
			f=1;
			j.showjob();
		}
	}
	if(f==1)
	{
		char ch;
		cout<<"\n Apply for this job? [Y/N]: ";
		cin>>ch;
		if(ch=='y' || ch=='Y')
		{
			while(fj.read((char*)&j,sizeof(j)))
			{
				if(j.code==jcode)
				{
					j.applies[j.no++]=acode;
					cout<<"\n Applied.";
				}
			}
		}
		else if (ch=='n' || ch=='N')
			cout<<"\n Not applied.";
	}
	else if(f==0)
		cout<<"\n Not Found!";
	fj.close();
	return 0;
}
//--------------------------------------------------------------------
//-------------Search functions for client, server and Job-------
//--------------------------------------------------------------------
void searchcl()
{
	client e;
	int code;
	int f=0;
	cout<<"\n Enter Company Code: ";
	cin>>code;
	ifstream fin("clients.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in Opening Client Database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&e,sizeof(e));
		if(e.code==code)
		{
			e.show_cl();
			f=1;
		}
	}
	fin.clear();
	fin.close();
	if(f==0)
		cout<<"\n No Record Found!";
}
void searchs()
{
	server a;
	int code;
	int f=0;
	cout<<"\n Enter server Code: ";
	cin>>code;
	ifstream fin("servers.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in Opening Server Database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&a,sizeof(a));
		if(a.code==code)
		{
			a.show_ser();
			f=1;
		}
	}
	fin.clear();
	fin.close();
	if(f==0)
		cout<<"\n No Record Found!";
}
void searchapt()
{
	appnt j;
	int code;
	int f=0;
	cout<<"\n Enter Job Code: ";
	cin>>code;
	ifstream fin("appointments.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in Opening Job Database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&j,sizeof(j));
		if(j.code==code)
		{
			j.showapt();
			f=1;
		}
	}
	fin.clear();
	fin.close();
	if(f==0)
		cout<<"\n No Record Found!";
}
//--------------------------------------------------------------------
//------------Modify Functions for server, client and Job--------
//--------------------------------------------------------------------
/*void app_modify()
{
	fstream f;
	f.open("servers.dat",ios::in|ios::out|ios::ate|ios::binary);
	if(!f)
	{
		cout<<"\n Error in opening file!";
		exit(0);
	}
	server a;
	f.seekg(0,ios::beg);
	int code;
	cout<<"\n Enter your code: ";
	cin>>code;
	int found=0;
	int loc=0;
	while(!f.eof())
	{
		f.read((char*)&a,sizeof(a));
		if(a.return_appcode()==code)
		{
			found=1;
			loc=f.tellg()-sizeof(a);
			break;
		}
	}
	f.clear();
	if(found==0)
		cout<<"\n No server found!";
	else if(found==1)
	{
		f.seekp(loc);
		cout<<"\n Enter your data:- ";
		a.get_app();
		char ch;
		cout<<"\n Modify Record? [Y/N]: ";
		cin>>ch;
		if(ch=='y' || ch=='Y')
		{
			f.write((char*)&a,sizeof(a));
			cout<<"\n Record modified!";
		}
		else if(ch=='n' || ch=='N')
		{
			cout<<"\n Record Not Modified!";
		}
	}
	f.close();
}
void emp_modify()
{
	fstream f;
	f.open("clients.dat",ios::in|ios::out|ios::ate|ios::binary);
	if(!f)
	{
		cout<<"\n Error in opening file!";
		exit(0);
	}
	client e;
	f.seekg(0,ios::beg);
	int code;
	cout<<"\n Enter your code: ";
	cin>>code;
	int found=0;
	int loc=0;
	while(!f.eof())
	{
		f.read((char*)&e,sizeof(e));
		if(e.returncode()==code)
		{
			found=1;
			loc=f.tellg()-sizeof(e);
			break;
		}
	}
	f.clear();
	if(found==0)
		cout<<"\n No client found!";
	else if(found==1)
	{
		f.seekp(loc);
		cout<<"\n Enter your data:- ";
		e.get_emp();
		char ch;
		cout<<"\n Modify Record? [Y/N]: ";
		cin>>ch;
		if(ch=='y' || ch=='Y')
		{
			f.write((char*)&e,sizeof(e));
			cout<<"\n Record modified!";
		}
		else if(ch=='n' || ch=='N')
		{
			cout<<"\n Record Not Modified!";
		}
	}
	f.close();
}*/
void apt_modify()
{
	fstream f;
	f.open("appointments.dat",ios::in|ios::out|ios::ate|ios::binary);
	if(!f)
	{
		cout<<"\n Error in opening file!";
		exit(0);
	}
	jobs j;
	f.seekg(0,ios::beg);
	int code;
	cout<<"\n Enter your code: ";
	cin>>code;
	int found=0;
	int loc=0;
	while(!f.eof())
	{
		f.read((char*)&j,sizeof(j));
		if(j.returncode()==code)
		{
			found=1;
			loc=f.tellg()-sizeof(j);
			break;
		}
	}
	f.clear();
	if(found==0)
		cout<<"\n No client found!";
	else if(found==1)
	{
		f.seekp(loc);
		cout<<"\n Enter your data:- ";
		j.getapt();
		char ch;
		cout<<"\n Modify Record? [Y/N]: ";
		cin>>ch;
		if(ch=='y' || ch=='Y')
		{
			f.write((char*)&j,sizeof(j));
			cout<<"\n Record modified!";
		}
		else if(ch=='n' || ch=='N')
		{
			cout<<"\n Record Not Modified!";
		}
	}
	f.close();
}
//--------------------------------------------------------------------
//---------------------Function to check job servers------------------
//--------------------------------------------------------------------
void checkser()
{
	appnt j;
	int code;
	cout<<"\n Enter Appointment code: ";
	cin>>code;
	ifstream fin("appointments.dat",ios::in|ios::binary);
	if(!fin)
	{
		cout<<"\n Error in opening Appointment Database!";
		exit(0);
	}
	while(!fin.eof())
	{
		fin.read((char*)&j,sizeof(j));
		if(j.code==code)
		{
			if(strcmp(j.status,"OPEN")==0)
			{
				j.showapply();
			}
		}
		else
			cout<<"\n Not found!";
	}
	fin.clear();
	fin.close();
}
//--------------------------------------------------------------------
//---------Functions for Admin, server, client and Main Menu----------
//--------------------------------------------------------------------
void admin_menu()
{
	clrscr();
	int ch;
	do
	{
		cout<<"\n\t ADMIN MENU"
		    <<"\n [1] Delete Server Database"
		    <<"\n [2] Delete Client Database"
		    <<"\n [3] Delete Appointment Database"
		    <<"\n [4] Display All Server Records"
		    <<"\n [5] Display All Client Records"
		    <<"\n [6] Display All Appointment Records"
		    <<"\n [7] Search for an Server"
		    <<"\n [8] Search for an Client"
		    <<"\n [9] Search for a Appointment"
		    <<"\n [10] Exit"
		    <<"\n     Enter your choice [1-10]: ";
		cin>>ch;
		server a;
		client e;
		appnt j;
		switch(ch)
		{
			case 1: delete_ser();
				break;
			case 2: delete_cl();
				break;
			case 3: delete_apt();
				break;
			case 4: print_ser(a);
				break;
			case 5: print_cl(e);
				break;
			case 6: dispapt(j);
				break;
			case 7: searchs();
				break;
			case 8: searchcl();
				break;
			case 9: searchapt();
				break;
			case 10: break;
			default: cout<<"\n Invalid Choice!";
		}
		if(ch!=10)
			getch();
	}
	while(ch!=10);
}
void ser_menu()
{
	clrscr();
	server a;
	int ch;
	do
	{
		cout<<"\n\t\t SERVER MENU"
		    <<"\n\t [1] Read Database"
		    <<"\n\t [2] Search for Appointments"
		    <<"\n\t [3] Apply for Appointments"
		    <<"\n\t [4] Check all Appointments"
		    <<"\n\t [4] Delete your account"
		    <<"\n\t [5] Exit"
		    <<"\n\t     Enter your choice [1-5]: ";
		cin>>ch;
		switch(ch)
		{
			case 1: print_ser(a);
				break;
			case 2: search_apt();
				break;
			case 3: apply_apt();
				break;
			case 4: delete_app();
				break;
			case 5: break;
			default: cout<<"\n Invalid choice!";
		}
		if(ch!=5)
			getch();
	}
	while(ch!=5);
}
void cl_menu()
{
	clrscr();
	client e;
	int ch;
	do
	{
		cout<<"\n\t\t CLIENT MENU"
		    <<"\n\t [1] Read database"
		    <<"\n\t [2] Check Servers"
		    <<"\n\t [3] Book an Appointment"
		    <<"\n\t [4] Cancel Appointment"
		    <<"\n\t [5] Modify Appointment"
		    <<"\n\t [6] Delete Account"
		    <<"\n\t [7] Exit"
		    <<"\n\t     Enter your choice [1-7]: ";
		cin>>ch;
		switch(ch)
		{
			case 1: print_cl(e);
				break;
			case 2: checkser();
				break;
			case 3: addapts();
				break;
			case 4: delete_apt();
				break;
			case 5: apt_modify();
				break;
			case 6: delete_cl();
				break;
			case 7: break;
			default: cout<<"\n Invalid choice!";
		}
		if(ch!=7)
			getch();
	}
	while(ch!=7);
}
//--------------------------------------------------------------------
//------------------------------Login for User------------------------
//--------------------------------------------------------------------
void loginuser()
{
	int ch;
	cout<<"\n [1] Login as server"
	    <<"\n [2] Login as client"
	    <<"\n [3] Exit"
	    <<"\n     Enter your choice [1-3]: ";
	cin>>ch;
	switch(ch)
	{
		case 1: int k=login_ser();
			if(k==1)
				ser_menu();
			break;
		case 2: int m=login_cl();
			if(m==1)
				cl_menu();
			break;
		case 3: break;
		default: cout<<"\n Invalid choice!";
	}
}
//--------------------------------------------------------------------
//--------------------------------MAIN MENU---------------------------
//--------------------------------------------------------------------
void main_menu()
{
	int ch;
	do
	{
	    cout<<"\n===================================";
        cout<<"\n\t\t\t\t site";
        cout<<"\n========================================";
		cout<<"\n\t\t\t MAIN MENU";
        cout<<"\n\t\t [1] Enter as User";
        cout<<"\n\t\t [2] Enter as Admin";
        cout<<"\n\t\t [3] Exit.";
        cout<<"\n\t\t     Enter your choice [1-3]: ";
		cin>>ch;
		if(ch==1)
		{
			int c;
			cout<<"\n\t [1] Register"
			    <<"\n\t [2] Login to your account"
			    <<"\n\t [3] Back to Main Menu"
			    <<"\n\t   Enter your choice [1-3]: ";
			cin>>c;
			switch(c)
			{
				case 1: register_user();
					break;
				case 2: loginuser();
					break;
				case 3: break;
				default: cout<<"\n Invalid choice!";
			}
			if(ch!=3)
				getch();
		}
		else if(ch==2)
		{
			int d=enter_admin();
			if(d==1)
				admin_menu();
		}
		else if(ch==3)
			exit(0);
	}
	while(ch!=3);
}
//--------------------------------------------------------------------
//------------------------------Main Function-------------------------
//--------------------------------------------------------------------
int main()
{
	clrscr();
	main_menu();
	getch();
	return 0;
}
